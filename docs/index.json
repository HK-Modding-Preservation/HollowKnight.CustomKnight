{
  "api_reference/CustomKnight.Cinematic.html": {
    "href": "api_reference/CustomKnight.Cinematic.html",
    "title": "Class Cinematic | Custom Knight",
    "keywords": "Class Cinematic Namespace CustomKnight Assembly CustomKnight.dll Class that defines a replacable Cinamatic public class Cinematic Inheritance object Cinematic Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Cinematic(string) Ctor public Cinematic(string ClipName) Parameters ClipName string Properties ClipName Name of the current Cinematic public string ClipName { get; } Property Value string"
  },
  "api_reference/CustomKnight.CustomKnight.html": {
    "href": "api_reference/CustomKnight.CustomKnight.html",
    "title": "Class CustomKnight | Custom Knight",
    "keywords": "Class CustomKnight Namespace CustomKnight Assembly CustomKnight.dll Main Mod Class public class CustomKnight : Mod, IGlobalSettings<GlobalModSettings>, ILocalSettings<SaveModSettings>, ICustomMenuMod, ITogglableMod, IMod, ILogger Inheritance object Loggable Mod CustomKnight Implements IGlobalSettings<GlobalModSettings> ILocalSettings<SaveModSettings> ICustomMenuMod ITogglableMod IMod ILogger Inherited Members Mod.Name Mod.PreloadSceneHooks() Mod.LoadPriority() Mod.Initialize() Mod.GetMenuButtonText() Mod.SaveGlobalSettings() Loggable.LogFine(string) Loggable.LogFine(object) Loggable.LogDebug(string) Loggable.LogDebug(object) Loggable.Log(string) Loggable.Log(object) Loggable.LogWarn(string) Loggable.LogWarn(object) Loggable.LogError(string) Loggable.LogError(object) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CustomKnight() ctor public CustomKnight() Fields GameObjects Stores Preloaded gameobjects public static readonly Dictionary<string, GameObject> GameObjects Field Value Dictionary<string, GameObject> Properties GlobalSettings GlobalSettings public static GlobalModSettings GlobalSettings { get; set; } Property Value GlobalModSettings Instance Current Mod instance public static CustomKnight Instance { get; } Property Value CustomKnight SaveSettings Settings for current save public static SaveModSettings SaveSettings { get; set; } Property Value SaveModSettings ToggleButtonInsideMenu ToggleButtonInsideMenu public bool ToggleButtonInsideMenu { get; } Property Value bool dumpManager Current DumpManager instance public static DumpManager dumpManager { get; } Property Value DumpManager swapManager Current SwapManager instance public static SwapManager swapManager { get; } Property Value SwapManager Methods GetMenuScreen(MenuScreen, ModToggleDelegates?) GetMenuScreen public MenuScreen GetMenuScreen(MenuScreen modListMenu, ModToggleDelegates? toggle) Parameters modListMenu MenuScreen toggle ModToggleDelegates? Returns MenuScreen GetName() GetName public string GetName() Returns string GetPreloadNames() GetPreloadNames public override List<(string, string)> GetPreloadNames() Returns List<(string, string)> GetVersion() GetVersion public override string GetVersion() Returns string Initialize(Dictionary<string, Dictionary<string, GameObject>>) Initialize public override void Initialize(Dictionary<string, Dictionary<string, GameObject>> preloadedObjects) Parameters preloadedObjects Dictionary<string, Dictionary<string, GameObject>> OnLoadGlobal(GlobalModSettings) OnLoadGlobal public void OnLoadGlobal(GlobalModSettings s) Parameters s GlobalModSettings OnLoadLocal(SaveModSettings) OnLoadLocal public void OnLoadLocal(SaveModSettings s) Parameters s SaveModSettings OnSaveGlobal() OnSaveGlobal public GlobalModSettings OnSaveGlobal() Returns GlobalModSettings OnSaveLocal() OnSaveLocal public SaveModSettings OnSaveLocal() Returns SaveModSettings Unload() Unload public void Unload() Events OnInit Event called when CK is initialised but before applying skin public static event EventHandler<EventArgs> OnInit Event Type EventHandler<EventArgs> OnReady Event called when CK is fully ready (after applying a skin) public static event EventHandler<EventArgs> OnReady Event Type EventHandler<EventArgs> OnUnload Event called when the mod is unloaded public static event EventHandler<EventArgs> OnUnload Event Type EventHandler<EventArgs>"
  },
  "api_reference/CustomKnight.CustomKnightTexture.html": {
    "href": "api_reference/CustomKnight.CustomKnightTexture.html",
    "title": "Class CustomKnightTexture | Custom Knight",
    "keywords": "Class CustomKnightTexture Namespace CustomKnight Assembly CustomKnight.dll The Class that represents the state of a Skinable's texture. public class CustomKnightTexture Inheritance object CustomKnightTexture Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CustomKnightTexture(string, bool, Texture2D, Texture2D) ctor public CustomKnightTexture(string fileName, bool missing, Texture2D defaultTex, Texture2D tex) Parameters fileName string missing bool defaultTex Texture2D tex Texture2D Fields defaultSprite defaultSprite of the texture pulled from game public Sprite defaultSprite Field Value Sprite defaultTex default texture of the CKT pulled from the game public Texture2D defaultTex Field Value Texture2D fileName filename of the texture public string fileName Field Value string missing is the texture missing public bool missing Field Value bool tex the loaded texture public Texture2D tex Field Value Texture2D Properties IsSprite is a sprite or a texture public bool IsSprite { get; } Property Value bool currentTexture Gets the tex or defaultTex depending on availablilty public Texture2D currentTexture { get; set; } Property Value Texture2D"
  },
  "api_reference/CustomKnight.DumpEvent.html": {
    "href": "api_reference/CustomKnight.DumpEvent.html",
    "title": "Class DumpEvent | Custom Knight",
    "keywords": "Class DumpEvent Namespace CustomKnight Assembly CustomKnight.dll DumpEvent public class DumpEvent : EventArgs Inheritance object EventArgs DumpEvent Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties go The dump GameObject public GameObject go { get; set; } Property Value GameObject scene Scene of the dump object public Scene scene { get; set; } Property Value Scene"
  },
  "api_reference/CustomKnight.DumpManager.html": {
    "href": "api_reference/CustomKnight.DumpManager.html",
    "title": "Class DumpManager | Custom Knight",
    "keywords": "Class DumpManager Namespace CustomKnight Assembly CustomKnight.dll Main class for managing dumping sprites public class DumpManager Inheritance object DumpManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetIsEnabled() GetIsEnabled public bool GetIsEnabled() Returns bool Events BeforeDumpingGameObject Event raised jsut before a game object is dumped public static event EventHandler<DumpEvent> BeforeDumpingGameObject Event Type EventHandler<DumpEvent>"
  },
  "api_reference/CustomKnight.GameObjectProxy.html": {
    "href": "api_reference/CustomKnight.GameObjectProxy.html",
    "title": "Class GameObjectProxy | Custom Knight",
    "keywords": "Class GameObjectProxy Namespace CustomKnight Assembly CustomKnight.dll The proxy GameObject that is used to create the GO hierarchy that the swaps must be applied to public class GameObjectProxy Inheritance object GameObjectProxy Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields alias alias of the file public string alias Field Value string children Direct Childern of this GOP public Dictionary<string, GameObjectProxy> children Field Value Dictionary<string, GameObjectProxy> fileType Type of the file that is detected public string fileType Field Value string hasChildren if the GOP has Children public bool hasChildren Field Value bool hasTexture if the GOP has texture public bool hasTexture Field Value bool name Name/path the file public string name Field Value string rootPath root path of the file (name of the folder under swap) public string rootPath Field Value string Methods TraverseGameObjectDirectory(string) Create the hierarchy based on detecting files and directories at a particular path public void TraverseGameObjectDirectory(string basePath) Parameters basePath string TraverseGameObjectPath(string, string, string, string) Create the hierarchy defined by the given path public void TraverseGameObjectPath(string path, string rootPath, string name, string alias = \"spl_ck_dndy\") Parameters path string rootPath string name string alias string getAliasPath() Get the alias Path public string getAliasPath() Returns string getObjectPath() Get the file Path public string getObjectPath() Returns string getTexturePath() get the texture path public string getTexturePath() Returns string"
  },
  "api_reference/CustomKnight.GlobalModSettings.html": {
    "href": "api_reference/CustomKnight.GlobalModSettings.html",
    "title": "Class GlobalModSettings | Custom Knight",
    "keywords": "Class GlobalModSettings Namespace CustomKnight Assembly CustomKnight.dll Overall CK settings public class GlobalModSettings Inheritance object GlobalModSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Keybinds Saves the keybinds [JsonConverter(typeof(PlayerActionSetConverter))] public KeyBinds Keybinds Field Value KeyBinds saveSkins Skins for each of the save slots public string[] saveSkins Field Value string[] Properties DefaultSkin Currently Selected Skin public string DefaultSkin { get; set; } Property Value string DumpOldSwaps Option to dump swaps in the old directory style public bool DumpOldSwaps { get; set; } Property Value bool EnableParticleSwap Option to enable swapping particles (only active when swap is enabled) public bool EnableParticleSwap { get; set; } Property Value bool EnablePauseMenu Option to enable the new Pause Menu public bool EnablePauseMenu { get; set; } Property Value bool EnableSaveHuds Option to enable the Save Selection screen to be skinned public bool EnableSaveHuds { get; set; } Property Value bool FavoriteSkins Favorite skins are kept at the top of the skin list public List<string> FavoriteSkins { get; set; } Property Value List<string> GenerateDefaultSkin Used to indicate to generate default skin on next restart public bool GenerateDefaultSkin { get; set; } Property Value bool MaxSkinCache Total Number of skins to keep in memory per session public int MaxSkinCache { get; set; } Property Value int NameLength Max Length of the Skin Names that is displayed in UI public int NameLength { get; set; } Property Value int Preloads Enables or disables Preloading gameObjects public bool Preloads { get; set; } Property Value bool RecentSkins Recent skins are kept after the favorite skins public List<string> RecentSkins { get; set; } Property Value List<string> SwapperEnabled Enables Swappe public bool SwapperEnabled { get; set; } Property Value bool Version Version on which the settings file was created public string Version { get; set; } Property Value string"
  },
  "api_reference/CustomKnight.GlobalSwapMarker.html": {
    "href": "api_reference/CustomKnight.GlobalSwapMarker.html",
    "title": "Class GlobalSwapMarker | Custom Knight",
    "keywords": "Class GlobalSwapMarker Namespace CustomKnight Assembly CustomKnight.dll Component to allow swapper to detect a GameObject as if it is on another path (this is a hack and will only work for global directory) public class GlobalSwapMarker : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GlobalSwapMarker Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Fields optOut Opt out this object from skinning, will only be skinned once the actual object this is a clone of is encountered public bool optOut Field Value bool originalPath Original path of the game object public string originalPath Field Value string"
  },
  "api_reference/CustomKnight.ISelectableSkin.html": {
    "href": "api_reference/CustomKnight.ISelectableSkin.html",
    "title": "Interface ISelectableSkin | Custom Knight",
    "keywords": "Interface ISelectableSkin Namespace CustomKnight Assembly CustomKnight.dll The Interface that a Class must implement to be treated as a skin. public interface ISelectableSkin Methods Exists(string) Exists bool Exists(string FileName) Parameters FileName string A string that identifies the file Returns bool A bool representing if the file exists in this skin. GetCinematicUrl(string) GetCinematicUrl returns the Url for the given Cinematic string GetCinematicUrl(string CinematicName) Parameters CinematicName string A string that identifies the Cinematic Returns string A string, the Url for the given Cinematic (a file:// url for local files). GetFile(string) GetFile reads an arbitrary file from the skin byte[] GetFile(string FileName) Parameters FileName string A string that identifies the file Returns byte[] A byte[], the contents of that filename. GetId() GetId string GetId() Returns string The unique id of the skin as a string GetName() GetName string GetName() Returns string The Name to be displayed in the menu as a string GetTexture(string) GetTexture Texture2D GetTexture(string FileName) Parameters FileName string A string that identifies the texture file Returns Texture2D A Texture2D, the texture for that filename. HasCinematic(string) HasCinematic returns if a given ciematic exists bool HasCinematic(string CinematicName) Parameters CinematicName string A string that identifies the Cinematic Returns bool A bool, representing if a given ciematic exists getSwapperPath() getSwapperPath string getSwapperPath() Returns string A string representing the absolute path to the directory containing the swap folder. hasSwapper() hasSwapper bool hasSwapper() Returns bool A bool representing if the skin has support for swapper files. shouldCache() shouldCache bool shouldCache() Returns bool A bool representing if the texture can be cached in memory or not."
  },
  "api_reference/CustomKnight.ISupportsConfig.html": {
    "href": "api_reference/CustomKnight.ISupportsConfig.html",
    "title": "Interface ISupportsConfig | Custom Knight",
    "keywords": "Interface ISupportsConfig Namespace CustomKnight Assembly CustomKnight.dll Interface that must be implemented if the skin supports configs and settings public interface ISupportsConfig Methods GetConfig() Method that must return the SkinConfig SkinConfig GetConfig() Returns SkinConfig SkinConfig GetSettings() Method that must return the SkinSettings SkinSettings GetSettings() Returns SkinSettings SkinSettings"
  },
  "api_reference/CustomKnight.ISupportsOverrides.html": {
    "href": "api_reference/CustomKnight.ISupportsOverrides.html",
    "title": "Interface ISupportsOverrides | Custom Knight",
    "keywords": "Interface ISupportsOverrides Namespace CustomKnight Assembly CustomKnight.dll Interface that must be implemented for your skin to have support for overrides(alternate sheets) public interface ISupportsOverrides Methods GetAllOverrides(string) GetAllOverrides returns the overrides if a given file has overrides string[] GetAllOverrides(string FileName) Parameters FileName string A string that identifies the file Returns string[] A string[] of overrides GetOverride(string) GetOverride gets the currently selected override (or default) string GetOverride(string FileName) Parameters FileName string A string that identifies the file Returns string A string that identifies the overridden file HasOverrides(string) HasOverrides returns if a given file has overrides bool HasOverrides(string FileName) Parameters FileName string A string that identifies the file Returns bool A bool representing if the file exists in this skin. SetOverride(string, string) SetOverride sets a file as the selected override void SetOverride(string FileName, string AlternateFileName) Parameters FileName string A string that identifies the file AlternateFileName string A string that identifies the alternate file"
  },
  "api_reference/CustomKnight.KeyBinds.html": {
    "href": "api_reference/CustomKnight.KeyBinds.html",
    "title": "Class KeyBinds | Custom Knight",
    "keywords": "Class KeyBinds Namespace CustomKnight Assembly CustomKnight.dll Stores Keybinds public class KeyBinds : PlayerActionSet Inheritance object PlayerActionSet KeyBinds Inherited Members PlayerActionSet.LastInputType PlayerActionSet.LastInputTypeChangedTick PlayerActionSet.LastDeviceClass PlayerActionSet.LastDeviceStyle PlayerActionSet.Destroy() PlayerActionSet.CreatePlayerAction(string) PlayerActionSet.CreateOneAxisPlayerAction(PlayerAction, PlayerAction) PlayerActionSet.CreateTwoAxisPlayerAction(PlayerAction, PlayerAction, PlayerAction, PlayerAction) PlayerActionSet.GetPlayerActionByName(string) PlayerActionSet.Reset() PlayerActionSet.ClearInputState() PlayerActionSet.HasBinding(BindingSource) PlayerActionSet.RemoveBinding(BindingSource) PlayerActionSet.SaveData() PlayerActionSet.LoadData(byte[]) PlayerActionSet.Save() PlayerActionSet.Load(string) PlayerActionSet.Device PlayerActionSet.IncludeDevices PlayerActionSet.ExcludeDevices PlayerActionSet.Actions PlayerActionSet.UpdateTick PlayerActionSet.Enabled PlayerActionSet.PreventInputWhileListeningForBinding PlayerActionSet.UserData PlayerActionSet.this[string] PlayerActionSet.IsListeningForBinding PlayerActionSet.ListenOptions PlayerActionSet.ActiveDevice PlayerActionSet.OnLastInputTypeChanged object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KeyBinds() Ctor public KeyBinds() Fields OpenSkinList Keybind to open the skin list public PlayerAction OpenSkinList Field Value PlayerAction ReloadSkins Keybind to Reload the skin public PlayerAction ReloadSkins Field Value PlayerAction"
  },
  "api_reference/CustomKnight.SaveModSettings.html": {
    "href": "api_reference/CustomKnight.SaveModSettings.html",
    "title": "Class SaveModSettings | Custom Knight",
    "keywords": "Class SaveModSettings Namespace CustomKnight Assembly CustomKnight.dll Per save settings public class SaveModSettings Inheritance object SaveModSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DefaultSkin Selected Skin public string DefaultSkin { get; set; } Property Value string"
  },
  "api_reference/CustomKnight.SkinConfig.html": {
    "href": "api_reference/CustomKnight.SkinConfig.html",
    "title": "Class SkinConfig | Custom Knight",
    "keywords": "Class SkinConfig Namespace CustomKnight Assembly CustomKnight.dll Author side configuration for a skin public class SkinConfig Inheritance object SkinConfig Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SkinConfig() Ctor public SkinConfig() Fields alternates default filename to List of available alternate filenames public Dictionary<string, List<string>> alternates Field Value Dictionary<string, List<string>> brummColor Color that flashes when Melody is triggered [JsonConverter(typeof(ColorConverter))] public Color brummColor Field Value Color detectAlts Should the mod try to auto-detect Alts? should be disabled on authored skins public bool detectAlts Field Value bool dungFilter Should enable the filter over defender's crest effect public bool dungFilter Field Value bool dungFlash Color that flashes when an enemy is under the effect of defender's crest [JsonConverter(typeof(ColorConverter))] public Color dungFlash Field Value Color flashColor Color that flashes when the player heals [JsonConverter(typeof(ColorConverter))] public Color flashColor Field Value Color wraithsFilter Should disable the filter applied on the wraiths sheet public bool wraithsFilter Field Value bool"
  },
  "api_reference/CustomKnight.SkinManager.html": {
    "href": "api_reference/CustomKnight.SkinManager.html",
    "title": "Class SkinManager | Custom Knight",
    "keywords": "Class SkinManager Namespace CustomKnight Assembly CustomKnight.dll Allows Managing the Skins public static class SkinManager Inheritance object SkinManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Skinables Dictionary that holds all Skinable items public static Dictionary<string, Skinable> Skinables Field Value Dictionary<string, Skinable> Properties DATA_DIR Name of the Data directory public static string DATA_DIR { get; } Property Value string Methods AddSkin(ISelectableSkin) Add a skin to the skin list provided by an external mod. public static bool AddSkin(ISelectableSkin NewSkin) Parameters NewSkin ISelectableSkin an ISelectableSkin that represents the skin Returns bool true if the skin is added GetCurrentSkin() Gets the current skin. public static ISelectableSkin GetCurrentSkin() Returns ISelectableSkin an ISelectableSkin that represents the current skin GetDefaultSkin() Gets the default skin. public static ISelectableSkin GetDefaultSkin() Returns ISelectableSkin an ISelectableSkin that represents the default skin GetInstalledSkins() Gets all the installed skins (includes mod provided skins). public static ISelectableSkin[] GetInstalledSkins() Returns ISelectableSkin[] an ISelectableSkin[] that represents all the installed skins GetSkinById(string) Gets a skin from the overall skin list that matches a given id. public static ISelectableSkin GetSkinById(string id) Parameters id string a string that uniquely identifies the skin Returns ISelectableSkin an ISelectableSkin that represents the skin or the default skin RefreshSkin(bool) Refreshes the current skin, useful when the provided skin needs to change. public static void RefreshSkin(bool skipFlash) Parameters skipFlash bool a bool that determines if the knight should flash white SetSkinById(string) Change the current skin, to the one whose id is provided. public static void SetSkinById(string id) Parameters id string a string that uniquely identifies the skin Events OnSetSkin Event raised when a skin is set public static event EventHandler<EventArgs> OnSetSkin Event Type EventHandler<EventArgs>"
  },
  "api_reference/CustomKnight.SkinSettings.html": {
    "href": "api_reference/CustomKnight.SkinSettings.html",
    "title": "Class SkinSettings | Custom Knight",
    "keywords": "Class SkinSettings Namespace CustomKnight Assembly CustomKnight.dll User side skin settings that are updated by the mod public class SkinSettings Inheritance object SkinSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SkinSettings() Ctor public SkinSettings() Fields selectedAlternates Alternates that are selected for each default filename public Dictionary<string, string> selectedAlternates Field Value Dictionary<string, string>"
  },
  "api_reference/CustomKnight.Skinable.html": {
    "href": "api_reference/CustomKnight.Skinable.html",
    "title": "Class Skinable | Custom Knight",
    "keywords": "Class Skinable Namespace CustomKnight Assembly CustomKnight.dll The abstract Class that represents a single Skinable resource in the game. These can be used to add support for custom objects to be skinned as if they were defined within Custom Knight public abstract class Skinable Inheritance object Skinable Derived Skinable_Multiple Skinable_Single Skinable_Sprite Skinable_noCache Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable(string) Ctor public Skinable(string name) Parameters name string Name of the skinable Fields name The name of the Skinable resource, is used as an identifier and the file expected is name.png. public string name Field Value string Properties ckTex A CustomKnightTexture that holds the state of the skin for this skinable. public CustomKnightTexture ckTex { get; set; } Property Value CustomKnightTexture Methods Apply() Wrapper Method for ApplyTexture, used for logging. public void Apply() ApplyTexture(Texture2D) A Method that is called to Apply a Texture to the current Skinable. public abstract void ApplyTexture(Texture2D tex) Parameters tex Texture2D A Texture2D that is to be applied DumpDefaultTexture() Method that Dumps the Default Texture to the disk public void DumpDefaultTexture() Prepare() A Method that is called to so that any preparations for the Skinable can be done. for example, saving the material that will be used. public virtual void Prepare() Reset() Wrapper Method for ApplyTexture, used for Resetting the skin to default texture. public virtual void Reset() SaveDefaultTexture() A Method that is called to create a backup of the default texture of the skinable, used when unloading or as a fallback. this must save the defaultTexture in ckTex for seamless integration. public abstract void SaveDefaultTexture() SaveTexture() Wrapper Method for SaveDefaultTexture, used for logging. public void SaveTexture()"
  },
  "api_reference/CustomKnight.Skinable_Hook.html": {
    "href": "api_reference/CustomKnight.Skinable_Hook.html",
    "title": "Class Skinable_Hook | Custom Knight",
    "keywords": "Class Skinable_Hook Namespace CustomKnight Assembly CustomKnight.dll The abstract Class that represents a Skinable that uses a Sprite and requires a hook public abstract class Skinable_Hook : Skinable_Sprite Inheritance object Skinable Skinable_Sprite Skinable_Hook Inherited Members Skinable_Sprite.ApplyTexture(Texture2D) Skinable_Sprite.Reset() Skinable.name Skinable.ckTex Skinable.SaveDefaultTexture() Skinable.Prepare() Skinable.SaveTexture() Skinable.Apply() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Hook(string) Ctor public Skinable_Hook(string name) Parameters name string Name of the skinable Fields sprite The sprite to apply in your hook public Sprite sprite Field Value Sprite Methods ApplySprite(Sprite) Function that can set the sprite to be applied in the hook public override void ApplySprite(Sprite newSprite) Parameters newSprite Sprite Hook() Function you should use to subscribe to your hooks public abstract void Hook() UnHook() Function you should use to cleanup your hooks public abstract void UnHook()"
  },
  "api_reference/CustomKnight.Skinable_Multiple.html": {
    "href": "api_reference/CustomKnight.Skinable_Multiple.html",
    "title": "Class Skinable_Multiple | Custom Knight",
    "keywords": "Class Skinable_Multiple Namespace CustomKnight Assembly CustomKnight.dll The abstract Class that represents a Skinable that uses a multiple Materials public abstract class Skinable_Multiple : Skinable Inheritance object Skinable Skinable_Multiple Derived Skinable_Tk2ds Inherited Members Skinable.name Skinable.ckTex Skinable.SaveDefaultTexture() Skinable.ApplyTexture(Texture2D) Skinable.SaveTexture() Skinable.Apply() Skinable.Reset() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Multiple(string) Ctor public Skinable_Multiple(string name) Parameters name string Name of your skinable Properties materials List of materials that we must skin public List<Material> materials { get; set; } Property Value List<Material> Methods GetMaterials() An abstract Method that returns the List{Material} for this Skinable public abstract List<Material> GetMaterials() Returns List<Material> Prepare() A Method that is called to so that any preparations for the Skinable can be done. for example, saving the material that will be used. public override void Prepare()"
  },
  "api_reference/CustomKnight.Skinable_Single.html": {
    "href": "api_reference/CustomKnight.Skinable_Single.html",
    "title": "Class Skinable_Single | Custom Knight",
    "keywords": "Class Skinable_Single Namespace CustomKnight Assembly CustomKnight.dll The abstract Class that represents a Skinable that uses a single Material public abstract class Skinable_Single : Skinable Inheritance object Skinable Skinable_Single Derived Skinable_Tk2d Inherited Members Skinable.name Skinable.ckTex Skinable.SaveDefaultTexture() Skinable.ApplyTexture(Texture2D) Skinable.SaveTexture() Skinable.Apply() Skinable.Reset() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Single(string) Ctor public Skinable_Single(string name) Parameters name string Properties material Current Material to skin public Material material { get; set; } Property Value Material Methods GetMaterial() An abstract Method that returns the Material for this Skinable public abstract Material GetMaterial() Returns Material Prepare() A Method that is called to so that any preparations for the Skinable can be done. for example, saving the material that will be used. public override void Prepare()"
  },
  "api_reference/CustomKnight.Skinable_Sprite.html": {
    "href": "api_reference/CustomKnight.Skinable_Sprite.html",
    "title": "Class Skinable_Sprite | Custom Knight",
    "keywords": "Class Skinable_Sprite Namespace CustomKnight Assembly CustomKnight.dll The abstract Class that represents a Skinable that uses a Sprite public abstract class Skinable_Sprite : Skinable Inheritance object Skinable Skinable_Sprite Derived Skinable_Hook Inherited Members Skinable.name Skinable.ckTex Skinable.SaveDefaultTexture() Skinable.Prepare() Skinable.SaveTexture() Skinable.Apply() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Sprite(string) Ctor public Skinable_Sprite(string name) Parameters name string Methods ApplySprite(Sprite) An abstract Method that Applies a Sprite to this Skinable public abstract void ApplySprite(Sprite sprite) Parameters sprite Sprite ApplyTexture(Texture2D) Applies a texture public override void ApplyTexture(Texture2D tex) Parameters tex Texture2D Reset() Used for Resetting the skin to default texture public override void Reset()"
  },
  "api_reference/CustomKnight.Skinable_Tk2d.html": {
    "href": "api_reference/CustomKnight.Skinable_Tk2d.html",
    "title": "Class Skinable_Tk2d | Custom Knight",
    "keywords": "Class Skinable_Tk2d Namespace CustomKnight Assembly CustomKnight.dll Used for Skinning Tk2d sprites by material public abstract class Skinable_Tk2d : Skinable_Single Inheritance object Skinable Skinable_Single Skinable_Tk2d Inherited Members Skinable_Single.material Skinable_Single.GetMaterial() Skinable_Single.Prepare() Skinable.name Skinable.ckTex Skinable.SaveTexture() Skinable.Apply() Skinable.Reset() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Tk2d(string) Ctor public Skinable_Tk2d(string name) Parameters name string Methods ApplyTexture(Texture2D) A Method that is called to Apply a Texture to the current Skinable. public override void ApplyTexture(Texture2D tex) Parameters tex Texture2D SaveDefaultTexture() A Method that is called to create a backup of the default texture public override void SaveDefaultTexture()"
  },
  "api_reference/CustomKnight.Skinable_Tk2ds.html": {
    "href": "api_reference/CustomKnight.Skinable_Tk2ds.html",
    "title": "Class Skinable_Tk2ds | Custom Knight",
    "keywords": "Class Skinable_Tk2ds Namespace CustomKnight Assembly CustomKnight.dll Class to Skin multiple Tk2ds by their materials public abstract class Skinable_Tk2ds : Skinable_Multiple Inheritance object Skinable Skinable_Multiple Skinable_Tk2ds Inherited Members Skinable_Multiple.materials Skinable_Multiple.GetMaterials() Skinable_Multiple.Prepare() Skinable.name Skinable.ckTex Skinable.SaveTexture() Skinable.Apply() Skinable.Reset() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_Tk2ds(string) Ctor public Skinable_Tk2ds(string name) Parameters name string Methods ApplyTexture(Texture2D) A Method that is called to Apply a Texture to the current Skinable. public override void ApplyTexture(Texture2D tex) Parameters tex Texture2D SaveDefaultTexture() A Method that is called to create a backup of the default texture of the skinable public override void SaveDefaultTexture()"
  },
  "api_reference/CustomKnight.Skinable_noCache.html": {
    "href": "api_reference/CustomKnight.Skinable_noCache.html",
    "title": "Class Skinable_noCache | Custom Knight",
    "keywords": "Class Skinable_noCache Namespace CustomKnight Assembly CustomKnight.dll Skinable that does not cache the material public abstract class Skinable_noCache : Skinable Inheritance object Skinable Skinable_noCache Inherited Members Skinable.name Skinable.ckTex Skinable.Prepare() Skinable.SaveTexture() Skinable.Apply() Skinable.Reset() Skinable.DumpDefaultTexture() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Skinable_noCache(string) Ctor public Skinable_noCache(string name) Parameters name string Name of the skinable Methods ApplyTexture(Texture2D) A Method that is called to Apply a Texture to the current Skinable. public override void ApplyTexture(Texture2D tex) Parameters tex Texture2D A Texture2D that is to be applied GetMaterial() Function you must implement to return the material to be skinned public abstract Material GetMaterial() Returns Material SaveDefaultTexture() A Method that is called to create a backup of the default texture of the skinable, used when unloading or as a fallback. public override void SaveDefaultTexture()"
  },
  "api_reference/CustomKnight.SpriteRendererMaterialPropertyBlock.html": {
    "href": "api_reference/CustomKnight.SpriteRendererMaterialPropertyBlock.html",
    "title": "Class SpriteRendererMaterialPropertyBlock | Custom Knight",
    "keywords": "Class SpriteRendererMaterialPropertyBlock Namespace CustomKnight Assembly CustomKnight.dll Component that forcibly sets the MaterialPropertyBlock of the SpriteRenderer to a defined value every Update and LateUpdate public class SpriteRendererMaterialPropertyBlock : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SpriteRendererMaterialPropertyBlock Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Fields mpb The MaterialPropertyBlock to set public MaterialPropertyBlock mpb Field Value MaterialPropertyBlock sr The SpriteRenderer to set the block to public SpriteRenderer sr Field Value SpriteRenderer Methods LateUpdate() public void LateUpdate() Update() public void Update()"
  },
  "api_reference/CustomKnight.SwapEvent.html": {
    "href": "api_reference/CustomKnight.SwapEvent.html",
    "title": "Class SwapEvent | Custom Knight",
    "keywords": "Class SwapEvent Namespace CustomKnight Assembly CustomKnight.dll SwapEvent public class SwapEvent : EventArgs Inheritance object EventArgs SwapEvent Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties go GameObject being swapped public GameObject go { get; set; } Property Value GameObject gop Current GameObjectProxt public GameObjectProxy gop { get; set; } Property Value GameObjectProxy"
  },
  "api_reference/CustomKnight.SwapManager.html": {
    "href": "api_reference/CustomKnight.SwapManager.html",
    "title": "Class SwapManager | Custom Knight",
    "keywords": "Class SwapManager Namespace CustomKnight Assembly CustomKnight.dll Manages all Swaps public class SwapManager Inheritance object SwapManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods applyGlobalTk2dByPath(string, tk2dSprite) Global Swap a tk2dSprite as if it were at a given path public void applyGlobalTk2dByPath(string path, tk2dSprite tk) Parameters path string tk tk2dSprite Events OnApplySkinUsingProxy Event raised when a skin is applied using GOP public static event EventHandler<SwapEvent> OnApplySkinUsingProxy Event Type EventHandler<SwapEvent>"
  },
  "api_reference/CustomKnight.html": {
    "href": "api_reference/CustomKnight.html",
    "title": "Namespace CustomKnight | Custom Knight",
    "keywords": "Namespace CustomKnight Classes Cinematic Class that defines a replacable Cinamatic CustomKnight Main Mod Class CustomKnightTexture The Class that represents the state of a Skinable's texture. DumpEvent DumpEvent DumpManager Main class for managing dumping sprites GameObjectProxy The proxy GameObject that is used to create the GO hierarchy that the swaps must be applied to GlobalModSettings Overall CK settings GlobalSwapMarker Component to allow swapper to detect a GameObject as if it is on another path (this is a hack and will only work for global directory) KeyBinds Stores Keybinds SaveModSettings Per save settings SkinConfig Author side configuration for a skin SkinManager Allows Managing the Skins SkinSettings User side skin settings that are updated by the mod Skinable The abstract Class that represents a single Skinable resource in the game. These can be used to add support for custom objects to be skinned as if they were defined within Custom Knight Skinable_Hook The abstract Class that represents a Skinable that uses a Sprite and requires a hook Skinable_Multiple The abstract Class that represents a Skinable that uses a multiple Materials Skinable_Single The abstract Class that represents a Skinable that uses a single Material Skinable_Sprite The abstract Class that represents a Skinable that uses a Sprite Skinable_Tk2d Used for Skinning Tk2d sprites by material Skinable_Tk2ds Class to Skin multiple Tk2ds by their materials Skinable_noCache Skinable that does not cache the material SpriteRendererMaterialPropertyBlock Component that forcibly sets the MaterialPropertyBlock of the SpriteRenderer to a defined value every Update and LateUpdate SwapEvent SwapEvent SwapManager Manages all Swaps Interfaces ISelectableSkin The Interface that a Class must implement to be treated as a skin. ISupportsConfig Interface that must be implemented if the skin supports configs and settings ISupportsOverrides Interface that must be implemented for your skin to have support for overrides(alternate sheets)"
  }
}